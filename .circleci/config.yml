version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      back_end:
        default: "bckend${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |            
            #aws --version
            echo "DESTROY STACKS"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name bckend${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frntend${CIRCLE_WORKFLOW_ID:0:7}
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Destroyed ?????"
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            BACKENDIP=$(curl -H "token: ab-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backendip)
            echo "the id is: " $BACKENDIP
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo 'the key: ' migration_${CIRCLE_WORKFLOW_ID}
            echo "migration value is: " ${SUCCESS}

            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              nom run build
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              #exit 1
            fi


jobs:
  # Build Front-end
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install -qq
            npm update
            npm run build -qq

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  #Build Back-end
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install -qq package.json
             npm install -qq
             #npm i -g standard-version
             #npm audit fix #--audit-level=critical --force
             npm run build -qq
             npm view standard-version version

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  #Test Front-end
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install jest
            npm run test

  #Test Back-end
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install jest
            npm run test

  #Scan Front-end pacakages & security holes
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  #Scan Back-end pacakages & security holes
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end dependencies
          command: |
            cd backend
            npm install            
            npm audit fix --audit-level=critical --force
            cat package.json | grep standard

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip jq npm
      - run: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm jq

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags Project=udapeople \
            --stack-name "bckend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-west-2

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/

            SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text)

            echo $SERVER_IP >> inventory.txt
            cat inventory.txt
            ls -la ~/project/backend
            cp inventory.txt ~/project/backend
            ls  -la ~/project/backend

      - persist_to_workspace:
          root: ~/project/backend
          paths:
            - inventory.txt

      #Store
      - run:
          name: Backend ID
          command: |
            curl -H "Content-Type: text/plain" -H "token: ab-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$serverIP" https://api.memstash.io/values/backendip
            cat ~/project/.circleci/ansible/inventory.txt
            pwd

      #Frontend deploy infra
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Project=udapeople \
            --stack-name "frntend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-west-2

      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["28:ee:81:3a:67:68:8e:4d:82:8e:7c:42:58:42:75:5b"]

      - attach_workspace:
          at: ~/project/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm
            pip install awscli
            ls -la ~/project
            ls -la ~/project/.circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt

      - run:
          name: configure server
          command: |
            echo NODE_ENV=production >> "backend/.env"
            cd ~/project/.circleci/ansible
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text >> inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1

  run-migrations:
    docker:
      - image: circleci/node:12.18.4
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]

      - run:
          name: install awscli and python3
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
            pwd
            cd ~/project/backend
            echo NODE_ENV=production >> .env

            ls -la ~/project/backend
            cat ~/project/backend/.env


      - run:
          name: Run migrations
          command: |
           cd ~/project/backend
            npm install
            #npm audit fix --audit-level=critical --force
            #npm run build

            echo 'DUMP MIGRATIONS'
            echo "PWD: " $(pwd)
            npm run migrations >> ~/project/backend/migrations_dump.txt

            echo '*****************'
            cat migrations_dump.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd ~/project/backend
            pwd
            sudo cat ~/project/backend/migrations_dump.txt

            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              curl -H "Content-Type: text/plain" -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "SUCCESS = 1"
            else
              echo $(curl -H "Content-Type: text/plain" -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID} | grep "No migrations")
              echo "migration ID" migration_${CIRCLE_WORKFLOW_ID}
              echo "FAIL = 0"
            fi

      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli #python:3.7-alpine3.11
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip


            cd ~/project/frontend
#            apk add --no-cache nodejs
#            apk add --no-cache npm
#            apk add --no-cache bash
#            apk add --no-cache curl
#            pip install awscli

      - run:
          name: Get backend url
          command: |
            echo "PWD " $(pwd)
            ls -la ~/project

            BACKENDIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)

            BACKENDDNS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)

            cd ~/project/frontend
            touch .env
            export API_URL="http://${BACKENDIP}:3030"
            echo "${API_URL}" >> .env
            cat ~/project/frontend/.env

            #npm install webpack-dev-server -g
            npm install
            #npm update
            #npm audit fix --audit-level=critical --force
            npm run build
            cat ~/project/frontend/.env

            aws s3 cp ~/project/frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            cat ~/project/frontend/.env

      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["28:ee:81:3a:67:68:8e:4d:82:8e:7c:42:58:42:75:5b"]

      # attach workspace
      - attach_workspace:
          at: ~/project/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            apk add --update nodejs npm
            apk add --no-cache bash
            apk add --update tar gzip ansible nodejs npm curl jq
            apk add openssh-client

            ls -la ~/project/frontend/
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=udapeople" --output text >> ~/project/.circleci/ansible/inventory.txt

            pwd
            #tar -czvf backend.tgz /root/project/backend
            ls -la

      - run:
          name: Deploy backend
          no_output_timeout: 10m
          command: |
            printenv >> ~/project/backend/.env
            #cat ~/project/backend/.env
            cd ~/project
            tar -czvf backend.tgz backend

            cd ~/project/.circleci/ansible
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text >> inventory.txt
            cat /root/project/.circleci/ansible/inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip ansible nodejs npm curl jq
            pip install awscli
            cd ~/project/backend/
            pwd
            ls -la

      - run:
          name: Get backend url and do a smkoe test
          command: |
            cd ~/project/backend
            touch .env
            export BACKENDIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) >> .env
            export BACKENDDNS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) >> .env

            echo "BACKENDIP: ${BACKENDIP}"
            echo "BACKENDNS: ${BACKENDDNS}"
            echo "BACKENDIP: ${API_URL}"
            
            pwd
            ls -la
            cat ~/project/backend/.env

            echo "http://${BACKENDIP}:3030"
            curl "http://${BACKENDIP}:3030/api/status"
      #- destroy-environment
      #- revert-migrations

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com" | grep "Welcome"
            then
              echo "success!!"
              return 0
            else
              echo "Fail!!"
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      #- destroy-environment
      #- revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar -y
            yum install gzip -y
            yum install python3-pip -y
            yum -y install curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs

      - run:
          name: Update cloudfront distribution
          command: |
            set TERM=xterm
            echo "PATH"
            pwd

            #aws cloudformation deploy --template-file /root/project/.circleci/files/cloudfront.yml --stack-name udapeople-cloudfront --parameter-overrides WorkflowID="d3hxlpgu" --region us-west-2

            aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate \
            --output text > ./.circleci/ansible/originalWorkflowID.txt
            if [ -s "./.circleci/ansible/originalWorkflowID.txt" ]
            then
              cat ./.circleci/ansible/originalWorkflowID.txt
              originalWorkflowID=`cat ./.circleci/ansible/originalWorkflowID.txt`
            else
              echo "New stack will be created"
            fi
            if [ -n "$originalWorkflowID" ]
            then
              echo $originalWorkflowID
              StackOption=update-stack
              StackName="cloudfront"
            else
              StackOption=create-stack
              StackName=udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            fi
            aws cloudformation $StackOption \
            --stack-name $StackName \
            --template-body file://./.circleci/files/cloudfront.yml \
            --parameter ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags Key=Name,Value=Udapeople-production-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - originalWorkflowID.txt
#      - destroy-environment:
#          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#      - revert-migrations

      # Here's where you will add some code to rollback on failure  
      #- destroy-environment
      #- revert-migrations

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli 
    steps:
      - checkout

      - run: yum -y install tar gzip jq npm
      - run: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm jq

      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get Old Stack Workflow ID and Remove old stacks and files
          command: |
            originalWorkflowID=`cat ./.circleci/ansible/originalWorkflowID.txt`
            echo $originalWorkflowID
            if [ -n "$originalWorkflowID" ]
            then
              aws s3 rm s3://udapeople-$originalWorkflowID --recursive
              aws s3 rb s3://udapeople-$originalWorkflowID --force
              aws cloudformation delete-stack --stack-name udapeople-frontend-$originalWorkflowID
              aws cloudformation delete-stack --stack-name udapeople-backend-$originalWorkflowID
            else
              echo "No old workflow exists"
            fi 
      #- destroy-environment:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- revert-migrations


#      - run:
#          name: Get old stack workflow id and remove old stacks
#          command: |
  
#            export OLDWORKFLOWID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
#            echo "oldworkflowID: " ${OLDWORKFLOWID}

#            export MYSTACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
#            echo "STACKS: " ${MYSTACKS}

#            if [[ "${MYSTACKS[@]}" =~ "${OLDWORKFLOWID}" ]]
#            then
#              aws s3 rm "s3://udapeople-${OLDWORKFLOWID}" --recursive
#              aws cloudformation delete-stack --stack-name bckend${OLDWORKFLOWID}
#              aws cloudformation delete-stack --stack-name frntend${OLDWORKFLOWID}
#            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations,deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
